import { Injectable, NgZone } from '@angular/core';
import { Inject } from '@angular/core';
import { CONFIGURATION } from './toke';
import { Subject } from 'rxjs';
export class NgOneTapService {
    constructor(envConfig, ngZone) {
        this.envConfig = envConfig;
        this.ngZone = ngZone;
        this._promtMoment = new Subject();
        this._oneTapCredentialResponse = new Subject();
        this._authUserResponse = new Subject();
    }
    get promtMoment() {
        return this._promtMoment.asObservable();
    }
    get oneTapCredentialResponse() {
        return this._oneTapCredentialResponse.asObservable();
    }
    get authUserResponse() {
        return this._authUserResponse.asObservable();
    }
    tapInitialize(config) {
        window.onload = () => {
            this.tapRender(config);
        };
        if (document.readyState == 'complete') {
            this.tapRender(config);
        }
    }
    tapRender(config) {
        const conf = Object.assign(Object.assign({}, this.envConfig), config);
        if (conf === null || conf === void 0 ? void 0 : conf.disable_exponential_cooldowntime) {
            document.cookie = 'g_state' + '=;Path=/;';
        }
        window.google.accounts.id.initialize(Object.assign(Object.assign({}, conf), { callback: (auth) => {
                this.ngZone.run(() => {
                    if (conf.authvalidate_by_googleapis) {
                        const http = new XMLHttpRequest();
                        const url = `https://oauth2.googleapis.com/tokeninfo?id_token=${auth.credential}`;
                        http.open('GET', url);
                        http.send();
                        http.onreadystatechange = () => {
                            if (http.readyState == 4 && http.status == 200) {
                                this._authUserResponse.next(JSON.parse(http.responseText));
                            }
                        };
                    }
                    this._oneTapCredentialResponse.next(auth);
                });
            } }));
        window.google.accounts.id.prompt((pmt) => {
            this._promtMoment.next(pmt);
        });
    }
    signOut() {
        window.google.accounts.id.disableAutoSelect();
    }
    cancelTheTap() {
        window.google.accounts.id.cancel();
    }
}
NgOneTapService.decorators = [
    { type: Injectable }
];
NgOneTapService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [CONFIGURATION,] }] },
    { type: NgZone }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZ29vZ2xlLW9uZS10YXAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWdvb2dsZS1vbmUtdGFwL3NyYy9saWIvbmctZ29vZ2xlLW9uZS10YXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDdkMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUsvQixNQUFNLE9BQU8sZUFBZTtJQWtCeEIsWUFBMkMsU0FBd0IsRUFDM0QsTUFBYztRQURxQixjQUFTLEdBQVQsU0FBUyxDQUFlO1FBQzNELFdBQU0sR0FBTixNQUFNLENBQVE7UUFqQmQsaUJBQVksR0FBRyxJQUFJLE9BQU8sRUFBNEIsQ0FBQztRQUN2RCw4QkFBeUIsR0FBRyxJQUFJLE9BQU8sRUFBaUIsQ0FBQztRQUN6RCxzQkFBaUIsR0FBRyxJQUFJLE9BQU8sRUFBWSxDQUFDO0lBZTFCLENBQUM7SUFiM0IsSUFBSSxXQUFXO1FBQ1gsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzVDLENBQUM7SUFFRCxJQUFJLHdCQUF3QjtRQUN4QixPQUFPLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN6RCxDQUFDO0lBRUQsSUFBSSxnQkFBZ0I7UUFDaEIsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDakQsQ0FBQztJQUtELGFBQWEsQ0FBQyxNQUFzQjtRQUNoQyxNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRTtZQUNqQixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzNCLENBQUMsQ0FBQTtRQUNELElBQUksUUFBUSxDQUFDLFVBQVUsSUFBSSxVQUFVLEVBQUU7WUFDbkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMxQjtJQUNMLENBQUM7SUFFTyxTQUFTLENBQUMsTUFBcUI7UUFDbkMsTUFBTSxJQUFJLG1DQUFPLElBQUksQ0FBQyxTQUFTLEdBQUssTUFBTSxDQUFFLENBQUM7UUFDN0MsSUFBSSxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsZ0NBQWdDLEVBQUU7WUFDeEMsUUFBUSxDQUFDLE1BQU0sR0FBRyxTQUFTLEdBQUUsV0FBVyxDQUFDO1NBQzVDO1FBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFVBQVUsaUNBQzdCLElBQUksS0FBRSxRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRTtnQkFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO29CQUNqQixJQUFJLElBQUksQ0FBQywwQkFBMEIsRUFBRTt3QkFDakMsTUFBTSxJQUFJLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQzt3QkFDbEMsTUFBTSxHQUFHLEdBQUcsb0RBQW9ELElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQzt3QkFDbEYsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7d0JBQ3RCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQzt3QkFDWixJQUFJLENBQUMsa0JBQWtCLEdBQUcsR0FBRyxFQUFFOzRCQUMzQixJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksR0FBRyxFQUFFO2dDQUM1QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7NkJBQzlEO3dCQUNMLENBQUMsQ0FBQztxQkFDTDtvQkFDRCxJQUFJLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUM5QyxDQUFDLENBQUMsQ0FBQztZQUNQLENBQUMsSUFDSCxDQUFDO1FBQ0gsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ3JDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELE9BQU87UUFDSCxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUNsRCxDQUFDO0lBRUQsWUFBWTtRQUNSLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN2QyxDQUFDOzs7WUFqRUosVUFBVTs7OzRDQW1CTSxNQUFNLFNBQUMsYUFBYTtZQTFCaEIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbmZpZ3VyYXRpb24sIGNyZWRlbnRpYWxSZXMsIFVzZXJJbmZvIH0gZnJvbSAnLi9tb2RlbC90YXAubW9kZWwnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENPTkZJR1VSQVRJT04gfSBmcm9tICcuL3Rva2UnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUHJvbXB0TW9tZW50Tm90aWZpY2F0aW9uIH0gZnJvbSAnLi9tb2RlbC9wcm9tcHRtb21lbnQubW9kZWwnO1xuXG5kZWNsYXJlIHZhciB3aW5kb3c6IGFueTtcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZ09uZVRhcFNlcnZpY2Uge1xuXG4gICAgcHJpdmF0ZSBfcHJvbXRNb21lbnQgPSBuZXcgU3ViamVjdDxQcm9tcHRNb21lbnROb3RpZmljYXRpb24+KCk7XG4gICAgcHJpdmF0ZSBfb25lVGFwQ3JlZGVudGlhbFJlc3BvbnNlID0gbmV3IFN1YmplY3Q8Y3JlZGVudGlhbFJlcz4oKTtcbiAgICBwcml2YXRlIF9hdXRoVXNlclJlc3BvbnNlID0gbmV3IFN1YmplY3Q8VXNlckluZm8+KCk7XG5cbiAgICBnZXQgcHJvbXRNb21lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9tdE1vbWVudC5hc09ic2VydmFibGUoKTtcbiAgICB9XG5cbiAgICBnZXQgb25lVGFwQ3JlZGVudGlhbFJlc3BvbnNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb25lVGFwQ3JlZGVudGlhbFJlc3BvbnNlLmFzT2JzZXJ2YWJsZSgpO1xuICAgIH1cblxuICAgIGdldCBhdXRoVXNlclJlc3BvbnNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXV0aFVzZXJSZXNwb25zZS5hc09ic2VydmFibGUoKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KENPTkZJR1VSQVRJT04pIHByaXZhdGUgZW52Q29uZmlnOiBjb25maWd1cmF0aW9uLFxuICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmUpIHsgfVxuXG4gICAgdGFwSW5pdGlhbGl6ZShjb25maWc/OiBjb25maWd1cmF0aW9uKSB7XG4gICAgICAgIHdpbmRvdy5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRhcFJlbmRlcihjb25maWcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09ICdjb21wbGV0ZScpIHtcbiAgICAgICAgICAgIHRoaXMudGFwUmVuZGVyKGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHRhcFJlbmRlcihjb25maWc6IGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgY29uc3QgY29uZiA9IHsuLi50aGlzLmVudkNvbmZpZywgLi4uY29uZmlnIH07XG4gICAgICAgIGlmIChjb25mPy5kaXNhYmxlX2V4cG9uZW50aWFsX2Nvb2xkb3dudGltZSkge1xuICAgICAgICAgICAgZG9jdW1lbnQuY29va2llID0gJ2dfc3RhdGUnICsnPTtQYXRoPS87JztcbiAgICAgICAgfVxuICAgICAgICB3aW5kb3cuZ29vZ2xlLmFjY291bnRzLmlkLmluaXRpYWxpemUoe1xuICAgICAgICAgICAgLi4uY29uZiwgY2FsbGJhY2s6IChhdXRoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmYuYXV0aHZhbGlkYXRlX2J5X2dvb2dsZWFwaXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGh0dHAgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IGBodHRwczovL29hdXRoMi5nb29nbGVhcGlzLmNvbS90b2tlbmluZm8/aWRfdG9rZW49JHthdXRoLmNyZWRlbnRpYWx9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0dHAub3BlbignR0VUJywgdXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0dHAuc2VuZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGh0dHAucmVhZHlTdGF0ZSA9PSA0ICYmIGh0dHAuc3RhdHVzID09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hdXRoVXNlclJlc3BvbnNlLm5leHQoSlNPTi5wYXJzZShodHRwLnJlc3BvbnNlVGV4dCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25lVGFwQ3JlZGVudGlhbFJlc3BvbnNlLm5leHQoYXV0aCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB3aW5kb3cuZ29vZ2xlLmFjY291bnRzLmlkLnByb21wdCgocG10KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9wcm9tdE1vbWVudC5uZXh0KHBtdCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNpZ25PdXQoKSB7XG4gICAgICAgIHdpbmRvdy5nb29nbGUuYWNjb3VudHMuaWQuZGlzYWJsZUF1dG9TZWxlY3QoKTtcbiAgICB9XG5cbiAgICBjYW5jZWxUaGVUYXAoKSB7XG4gICAgICAgIHdpbmRvdy5nb29nbGUuYWNjb3VudHMuaWQuY2FuY2VsKCk7XG4gICAgfVxufVxuIl19